@using TestProject.Extentions
@model PaginatedList<TestProject.Models.ViewModels.TripViewModel>

@{
    ViewData["Title"] = "Index";
}

<h1>Trip list</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>


<!-- Sorting Dropdown -->
<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            Sort by:
            <select name="sortOrder"
                    asp-items="@(new SelectList(ViewBag.SortOptions as IEnumerable<SelectListItem>, "Value", "Text", ViewBag.CurrentSortOrder))"
                    onchange="this.form.submit()">
            </select>
        </p>
    </div>
</form>


<table class="table">
    <thead>
        <tr>
            <th>Driver</th>
            <th>Start Position</th>
            <th>Destination</th>
            <th>Departure Time</th>
            <th>Return Time</th>
            <th>Price</th>
            <th>Total Seats</th>
            <th>Free Seats</th>
            <th>Car Model</th>
            <th>Plate Number</th>
            <th>Picture</th>
            <th>Status</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>    
            <td>
                @Html.DisplayFor(modelItem => item.DriverName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StartPosition)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Destination)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DepartureTime)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReturnTime)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TotalSeats)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.FreeSeats)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CarModel)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PlateNumber)
            </td>
            <td>
          @*       @Html.DisplayFor(modelItem => item.ImagePath) *@
                    <img src="@item.ImagePath" alt="Trip Picture" />
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StatusTrip)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>

<!-- Previous Button -->
@if (Model.HasPreviousPage)
{
    <a asp-action="Index"
       asp-route-pageNumber="@(Model.PageIndex - 1)"
       asp-route-sortOrder="@ViewBag.CurrentSortOrder"
       class="btn btn-default">
        Previous
    </a>
}
else
{
    <button disabled class="btn btn-default">Previous</button>
}

<!-- Page Numbers -->
@for (var i = 1; i <= Model.TotalPages; i++)
{
    <a asp-action="Index"
       asp-route-pageNumber="@i"
       asp-route-sortOrder="@ViewBag.CurrentSortOrder"
       class="btn @(i == Model.PageIndex ? "btn-primary" : "btn-default")">
        @i
    </a>
}

<!-- Next Button -->
@if (Model.HasNextPage)
{
    <a asp-action="Index"
       asp-route-pageNumber="@(Model.PageIndex + 1)"
       asp-route-sortOrder="@ViewBag.CurrentSortOrder"
       class="btn btn-default">
        Next
    </a>
}
else
{
    <button disabled class="btn btn-default">Next</button>
}
